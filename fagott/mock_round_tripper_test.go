package fagott

// Don't edit this file.
// This file is generated by gomic 0.5.6.
// https://github.com/suzuki-shunsuke/gomic

import (
	http "net/http"
	testing "testing"

	gomic "github.com/suzuki-shunsuke/gomic/gomic"
)

type (
	// MockRoundTripper is a mock.
	MockRoundTripper struct {
		t                      *testing.T
		name                   string
		callbackNotImplemented gomic.CallbackNotImplemented
		impl                   struct {
			RoundTrip func(p0 *http.Request) (r0 *http.Response, r1 error)
		}
	}
)

// NewMockRoundTripper returns MockRoundTripper .
func NewMockRoundTripper(t *testing.T, cb gomic.CallbackNotImplemented) *MockRoundTripper {
	return &MockRoundTripper{
		t: t, name: "MockRoundTripper", callbackNotImplemented: cb}
}

// RoundTrip is a mock method.
func (mock MockRoundTripper) RoundTrip(p0 *http.Request) (r0 *http.Response, r1 error) {
	methodName := "RoundTrip" // nolint: goconst
	if mock.impl.RoundTrip != nil {
		return mock.impl.RoundTrip(p0)
	}
	if mock.callbackNotImplemented != nil {
		mock.callbackNotImplemented(mock.t, mock.name, methodName)
	} else {
		gomic.DefaultCallbackNotImplemented(mock.t, mock.name, methodName)
	}
	return mock.fakeZeroRoundTrip(p0)
}

// SetFuncRoundTrip sets a method and returns the mock.
func (mock *MockRoundTripper) SetFuncRoundTrip(impl func(p0 *http.Request) (r0 *http.Response, r1 error)) *MockRoundTripper {
	mock.impl.RoundTrip = impl
	return mock
}

// SetReturnRoundTrip sets a fake method.
func (mock *MockRoundTripper) SetReturnRoundTrip(r0 *http.Response, r1 error) *MockRoundTripper {
	mock.impl.RoundTrip = func(*http.Request) (*http.Response, error) {
		return r0, r1
	}
	return mock
}

// fakeZeroRoundTrip is a fake method which returns zero values.
func (mock MockRoundTripper) fakeZeroRoundTrip(p0 *http.Request) (r0 *http.Response, r1 error) {
	return r0, r1
}
